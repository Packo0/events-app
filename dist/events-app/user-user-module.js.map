{"version":3,"sources":["webpack:///./src/app/user/login.component.html","webpack:///./src/app/user/login.component.ts","webpack:///./src/app/user/profile.component.html","webpack:///./src/app/user/profile.component.ts","webpack:///./src/app/user/user.module.ts","webpack:///./src/app/user/user.routes.ts"],"names":[],"mappings":"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","file":"user-user-module.js","sourcesContent":["module.exports = \"<h1>Login</h1>\\r\\n<hr>\\r\\n<div class=\\\"col-md-4\\\">\\r\\n  <form #loginForm=\\\"ngForm\\\" (ngSubmit)=\\\"login(loginForm.value)\\\" autocomplete=\\\"off\\\" novalidate>\\r\\n    <div class=\\\"form-group\\\" >\\r\\n      <label for=\\\"userName\\\">User Name:</label>\\r\\n      <em *ngIf=\\\"loginForm.controls.userName?.invalid &&\\r\\n                 (loginForm.controls.userName?.touched || mouseoverLogin)\\\">Required</em>\\r\\n      <input\\r\\n        (ngModel)=\\\"userName\\\"\\r\\n        name=\\\"userName\\\"\\r\\n        id=\\\"userName\\\"\\r\\n        type=\\\"text\\\"\\r\\n        class=\\\"form-control\\\"\\r\\n        placeholder=\\\"User Name...\\\"\\r\\n        required />\\r\\n    </div>\\r\\n    <div class=\\\"form-group\\\" >\\r\\n      <label for=\\\"password\\\">Password:</label>\\r\\n      <em *ngIf=\\\"loginForm.controls.password?.invalid &&\\r\\n                 (loginForm.controls.password?.touched || mouseoverLogin)\\\">Required</em>\\r\\n      <input\\r\\n        (ngModel)=\\\"password\\\"\\r\\n        name=\\\"password\\\"\\r\\n        id=\\\"password\\\"\\r\\n        type=\\\"password\\\"\\r\\n        class=\\\"form-control\\\"\\r\\n        placeholder=\\\"Password...\\\"\\r\\n        required/>\\r\\n    </div>\\r\\n    <span (mouseenter)=\\\"mouseoverLogin=true\\\" (mouseleave)=\\\"mouseoverLogin=false\\\">\\r\\n      <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\" [disabled]=\\\"loginForm.invalid\\\">Login</button>\\r\\n    </span>\\r\\n    <button type=\\\"button\\\" (click)= \\\"cancel()\\\" class=\\\"btn btn-default\\\">Cancel</button>\\r\\n  </form>\\r\\n</div>\\r\\n\"","import { Component } from '@angular/core';\r\nimport { AuthService } from './auth.service';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n  templateUrl: './login.component.html',\r\n  styles: [`\r\n    em {float: right; color:#E05C65; padding-left: 10px;}\r\n  `]\r\n})\r\nexport class LoginComponent {\r\n  userName\r\n  password\r\n  mouseoverLogin\r\n\r\n  constructor(private authService: AuthService, private router: Router) { }\r\n\r\n  login(formValues) {\r\n    this.authService\r\n      .loginUser(formValues.userName, formValues.password)\r\n\r\n    this.router.navigate(['events'])\r\n  }\r\n\r\n  cancel() {\r\n    this.router.navigate(['events'])\r\n  }\r\n}\r\n","module.exports = \"<div>\\r\\n    <h1>Edit Your Profile </h1>\\r\\n    <hr>\\r\\n    <div class=\\\"col-md-4\\\">\\r\\n      <form [formGroup]=\\\"profileForm\\\" (ngSubmit)=\\\"saveProfile(profileForm.value)\\\" autocomplete=\\\"off\\\" novalidate>\\r\\n        <div class=\\\"form-group\\\"\\r\\n             [ngClass]=\\\"{'error': !validateFirstName()}\\\">\\r\\n          <label for=\\\"firstName\\\">First Name:</label>\\r\\n          <em *ngIf=\\\"!validateFirstName() && profileForm.controls.firstName.errors.required\\\">Required</em>\\r\\n          <em *ngIf=\\\"!validateFirstName() && profileForm.controls.firstName.errors.pattern\\\">Must start with letter</em>\\r\\n          <input\\r\\n            formControlName=\\\"firstName\\\"\\r\\n            id=\\\"firstName\\\"\\r\\n            type=\\\"text\\\"\\r\\n            class=\\\"form-control\\\"\\r\\n            placeholder=\\\"First Name...\\\" />\\r\\n        </div>\\r\\n        <div class=\\\"form-group\\\"\\r\\n             [ngClass]=\\\"{'error': !validateLastName()}\\\">\\r\\n          <label for=\\\"lastName\\\">Last Name:</label>\\r\\n          <em *ngIf=\\\"!validateLastName()\\\">Required</em>\\r\\n          <input\\r\\n            formControlName=\\\"lastName\\\"\\r\\n            id=\\\"lastName\\\"\\r\\n            type=\\\"text\\\"\\r\\n            class=\\\"form-control\\\"\\r\\n            placeholder=\\\"Last Name...\\\" />\\r\\n        </div>\\r\\n\\r\\n        <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\">Save</button>\\r\\n        <button type=\\\"button\\\" class=\\\"btn btn-default\\\" (click)=\\\"cancel()\\\">Cancel</button>\\r\\n      </form>\\r\\n    </div>\\r\\n  </div>\\r\\n\"","import { Component, OnInit } from '@angular/core'\r\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\r\nimport { AuthService } from './auth.service';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n  templateUrl: './profile.component.html',\r\n  styles: [`\r\n        em {float: right; color:#E05C65; padding-left: 10px;}\r\n        .error input {background-color: #E3C3C5;}\r\n        .error ::-webkit-input-placeholder {color: #999;}\r\n        .error ::-moz-placeholder {color: #999;}\r\n        .error :-moz-placeholder {color: #999;}\r\n        .error :ms-input-placeholder {color: #999;}\r\n  `]\r\n})\r\nexport class ProfileComponent implements OnInit {\r\n  profileForm: FormGroup\r\n  private firstName;\r\n  private lastName;\r\n  constructor(private auth: AuthService, private router: Router) { }\r\n\r\n  ngOnInit() {\r\n    this.firstName = new FormControl(this.auth.currentUser.firstName,\r\n      [Validators.pattern('[a-zA-Z].*'), Validators.required])\r\n    this.lastName = new FormControl(this.auth.currentUser.lastName, Validators.required)\r\n    this.profileForm = new FormGroup({\r\n      firstName: this.firstName,\r\n      lastName: this.lastName\r\n    })\r\n  }\r\n\r\n  saveProfile(formsValues) {\r\n    if (this.profileForm.valid) {\r\n      this.auth.updateCurrentUser(formsValues.firstName, formsValues.lastName)\r\n      this.router.navigate(['events'])\r\n    }\r\n  }\r\n\r\n  validateFirstName() {\r\n    return this.firstName.valid || this.firstName.untouched\r\n  }\r\n\r\n  validateLastName() {\r\n    return this.lastName.valid || this.lastName.untouched\r\n  }\r\n\r\n  cancel() {\r\n    this.router.navigate(['events'])\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterModule } from '@angular/router';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\n\r\n\r\nimport { ProfileComponent } from './profile.component';\r\nimport { userRoutes } from './user.routes';\r\nimport { LoginComponent } from './login.component';\r\n\r\n\r\n@NgModule({\r\n  imports:[\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    RouterModule.forChild(userRoutes)\r\n  ],\r\n  declarations: [\r\n    ProfileComponent,\r\n    LoginComponent\r\n  ],\r\n  providers: []\r\n})\r\nexport class UserModule {}\r\n","import { Routes } from '@angular/router';\r\nimport { ProfileComponent } from './profile.component';\r\nimport { LoginComponent } from './login.component';\r\n\r\nexport const userRoutes: Routes = [\r\n  { path: 'profile', component: ProfileComponent },\r\n  { path: 'login', component: LoginComponent },\r\n]\r\n"],"sourceRoot":""}